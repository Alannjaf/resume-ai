generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(cuid())
  clerkId      String        @unique
  email        String        @unique
  name         String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  role         UserRole      @default(USER)
  resumes      Resume[]
  subscription Subscription?

  @@index([clerkId])
  @@index([email])
}

model Resume {
  id           String          @id @default(cuid())
  userId       String
  title        String
  template     String          @default("modern")
  status       ResumeStatus    @default(DRAFT)
  isPublic     Boolean         @default(false)
  publicSlug   String?         @unique
  personalInfo Json?
  summary      String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  sections     ResumeSection[]

  @@index([userId])
  @@index([publicSlug])
}

model ResumeSection {
  id        String      @id @default(cuid())
  resumeId  String
  type      SectionType
  title     String
  content   Json
  order     Int
  isVisible Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  resume    Resume      @relation(fields: [resumeId], references: [id], onDelete: Cascade)

  @@unique([resumeId, order])
  @@index([resumeId])
}

model Subscription {
  id            String             @id @default(cuid())
  userId        String             @unique
  plan          SubscriptionPlan   @default(FREE)
  status        SubscriptionStatus @default(ACTIVE)
  paymentMethod String?
  paymentId     String?
  startDate     DateTime           @default(now())
  endDate       DateTime?
  cancelledAt   DateTime?
  resumeCount   Int                @default(0)
  aiUsageCount  Int                @default(0)
  exportCount   Int                @default(0)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  importCount   Int                @default(0)
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
}

model SystemSettings {
  id               Int      @id @default(autoincrement())
  maxFreeResumes   Int      @default(10)
  maxFreeAIUsage   Int      @default(100)
  maxFreeExports   Int      @default(20)
  maxBasicResumes  Int      @default(50)
  maxBasicAIUsage  Int      @default(500)
  maxBasicExports  Int      @default(100)
  maxProResumes    Int      @default(-1)
  maxProAIUsage    Int      @default(-1)
  maxProExports    Int      @default(-1)
  basicPlanPrice   Int      @default(5000)
  proPlanPrice     Int      @default(10000)
  maintenanceMode  Boolean  @default(false)
  updatedAt        DateTime @default(now()) @updatedAt
  maxBasicImports  Int      @default(0)
  maxFreeImports   Int      @default(0)
  maxProImports    Int      @default(-1)
  basicTemplates   Json     @default("[\"modern\", \"creative\"]")
  freeTemplates    Json     @default("[\"modern\"]")
  photoUploadPlans Json     @default("[\"BASIC\", \"PRO\"]")
  proTemplates     Json     @default("[\"modern\", \"creative\", \"executive\"]")
}

enum UserRole {
  USER
  ADMIN
}

enum ResumeStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SectionType {
  WORK_EXPERIENCE
  EDUCATION
  SKILLS
  LANGUAGES
  CERTIFICATIONS
  PROJECTS
  ACHIEVEMENTS
  REFERENCES
  CUSTOM
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  SUSPENDED
}
